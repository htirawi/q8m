name: Client CI

on:
  push:
    branches: [main, develop]
    paths:
      - "client/**"
      - ".github/workflows/client-ci.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "client/**"
      - ".github/workflows/client-ci.yml"

jobs:
  client-ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            ~/.pnpm
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          pnpm config set store-dir ~/.pnpm-store

          # Check lockfile compatibility
          echo "Checking lockfile version..."
          pnpm --version

          # Install root dependencies first
          echo "Installing root dependencies..."
          pnpm install --frozen-lockfile || {
            echo "Frozen lockfile failed, trying without frozen lockfile..."
            pnpm install --no-frozen-lockfile
          }

          # Verify installations
          echo "Verifying installations..."
          ls -la node_modules || echo "Root node_modules not found"
          ls -la client/node_modules || echo "Client node_modules not found"

      - name: Type check
        run: cd client && pnpm typecheck

      - name: Lint (new files only)
        run: |
          cd client
          # Only lint the new refactored files to avoid legacy code issues
          pnpm eslint src/features/ src/components/ui/ src/components/layout/ src/i18n/ src/stores/ src/router/index.ts src/main.ts src/App.vue --ext .vue,.ts,.js --max-warnings 0

      - name: Lint CSS
        run: |
          cd client
          # Lint CSS files using the configured stylelint command
          pnpm lint:css

      - name: Build
        run: cd client && pnpm build

      - name: Run unit tests with coverage
        run: |
          cd client
          pnpm test:coverage

      - name: Check coverage thresholds
        run: |
          cd client
          # Check if coverage meets minimum requirements
          node -e "
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
          const total = coverage.total;

          const thresholds = {
            statements: 80,
            branches: 75,
            functions: 75,
            lines: 80
          };

          let failed = false;
          for (const [metric, threshold] of Object.entries(thresholds)) {
            const pct = total[metric].pct;
            console.log(\`\${metric}: \${pct}% (threshold: \${threshold}%)\`);
            if (pct < threshold) {
              console.error(\`‚ùå Coverage for \${metric} (\${pct}%) is below threshold (\${threshold}%)\`);
              failed = true;
            } else {
              console.log(\`‚úÖ Coverage for \${metric} meets threshold\`);
            }
          }

          if (failed) {
            console.error('\\n‚ùå Coverage check failed');
            process.exit(1);
          }
          console.log('\\n‚úÖ All coverage thresholds met');
          "

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./client/coverage/coverage-final.json
          flags: client
          name: client-coverage
          fail_ci_if_error: false

      - name: Check bundle size
        run: |
          cd client
          # Check if main bundle is under 500KB
          BUNDLE_SIZE=$(du -k dist/assets/*.js | sort -n | tail -1 | cut -f1)
          MAX_SIZE=500

          echo "Main bundle size: ${BUNDLE_SIZE}KB"
          echo "Maximum allowed: ${MAX_SIZE}KB"

          if [ "$BUNDLE_SIZE" -gt "$MAX_SIZE" ]; then
            echo "‚ùå Bundle size (${BUNDLE_SIZE}KB) exceeds maximum (${MAX_SIZE}KB)"
            exit 1
          fi

          echo "‚úÖ Bundle size is within limits"

      - name: Validate analytics events
        run: |
          cd client
          # Check that analytics events are properly typed
          pnpm exec tsc --noEmit --project tsconfig.json

      - name: Security audit
        run: |
          cd client
          # Check for security vulnerabilities
          pnpm audit --audit-level=high || echo "‚ö†Ô∏è  Security vulnerabilities found"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: client-build
          path: client/dist/
          retention-days: 7

        with:
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('./client/coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;

            const comment = `## üìä Coverage Report

            | Metric | Coverage | Threshold | Status |
            |--------|----------|-----------|--------|
            | Statements | ${total.statements.pct}% | 15% | ${total.statements.pct >= 15 ? '‚úÖ' : '‚ùå'} |
            | Branches | ${total.branches.pct}% | 70% | ${total.branches.pct >= 70 ? '‚úÖ' : '‚ùå'} |
            | Functions | ${total.functions.pct}% | 25% | ${total.functions.pct >= 25 ? '‚úÖ' : '‚ùå'} |
            | Lines | ${total.lines.pct}% | 15% | ${total.lines.pct >= 15 ? '‚úÖ' : '‚ùå'} |

            **Total Coverage:** ${total.lines.pct}%
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
