version: "3.8"

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: quiz-platform-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-quiz_platform}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./server/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - quiz-platform-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: quiz-platform-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - quiz-platform-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: quiz-platform-api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${API_PORT:-3001}
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${MONGO_DATABASE:-quiz_platform}?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
      SERVER_URL: ${SERVER_URL:-http://localhost:3001}
      PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID}
      PAYPAL_CLIENT_SECRET: ${PAYPAL_CLIENT_SECRET}
      APS_MERCHANT_ID: ${APS_MERCHANT_ID}
      APS_ACCESS_CODE: ${APS_ACCESS_CODE}
      APS_MERCHANT_ACCESS_CODE: ${APS_MERCHANT_ACCESS_CODE}
      APS_SHA_REQUEST_PHRASE: ${APS_SHA_REQUEST_PHRASE}
      APS_SHA_RESPONSE_PHRASE: ${APS_SHA_RESPONSE_PHRASE}
      HYPERPAY_ENTITY_ID: ${HYPERPAY_ENTITY_ID}
      HYPERPAY_ACCESS_TOKEN: ${HYPERPAY_ACCESS_TOKEN}
      EXCHANGE_RATE_API_KEY: ${EXCHANGE_RATE_API_KEY}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      SIGNED_URL_SECRET: ${SIGNED_URL_SECRET}
    ports:
      - "${API_PORT:-3001}:${API_PORT:-3001}"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quiz-platform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT:-3001}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: quiz-platform-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3001}
      VITE_CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
      VITE_PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID}
      VITE_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      VITE_FACEBOOK_APP_ID: ${FACEBOOK_APP_ID}
      VITE_TURNSTILE_SITE_KEY: ${TURNSTILE_SITE_KEY}
    ports:
      - "${CLIENT_PORT:-3000}:${CLIENT_PORT:-3000}"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - quiz-platform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${CLIENT_PORT:-3000}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: quiz-platform-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      frontend:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - quiz-platform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: quiz-platform-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - quiz-platform-network

  # Monitoring with Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: quiz-platform-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - quiz-platform-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  quiz-platform-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
